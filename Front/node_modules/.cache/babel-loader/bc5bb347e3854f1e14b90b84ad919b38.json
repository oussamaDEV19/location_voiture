{"ast":null,"code":"import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport PostsReducer from './reducers/PostsReducer';\nimport thunk from 'redux-thunk';\nimport { AuthReducer } from './reducers/AuthReducer'; //import rootReducers from './reducers/Index';\n\nimport todoReducers from './reducers/Reducers';\nimport { reducer as reduxFormReducer } from 'redux-form';\n\nconst loggerMiddleware = store => next => action => {\n  console.log('dispatching action', action);\n  console.log('before dispatching state', store.getState());\n  let result = next(action);\n  setTimeout(() => {\n    console.log('dispatch time out');\n  }, 3000);\n  console.log('next state', store.getState());\n  return result;\n}; // const fetchDataMiddleware = (store) => (next) => (action) => {\n//     if (action.type === GET_POSTS) {\n//         //ajax call\n//     }\n//     return next(action);\n// };\n\n\nconst middleware = applyMiddleware(thunk);\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst reducers = combineReducers({\n  posts: PostsReducer,\n  auth: AuthReducer,\n  todoReducers,\n  form: reduxFormReducer\n}); //const store = createStore(rootReducers);\n\nexport const store = createStore(reducers, composeEnhancers(middleware));","map":{"version":3,"sources":["C:/Users/XpS/Desktop/MERN-LOCATION-VOITURE - Copy/Front/src/store/store.js"],"names":["applyMiddleware","combineReducers","compose","createStore","PostsReducer","thunk","AuthReducer","todoReducers","reducer","reduxFormReducer","loggerMiddleware","store","next","action","console","log","getState","result","setTimeout","middleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reducers","posts","auth","form"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,OAA3C,EAAmDC,WAAnD,QAAsE,OAAtE;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,QAA4B,wBAA5B,C,CACA;;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAASC,OAAO,IAAIC,gBAApB,QAA4C,YAA5C;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAYC,IAAD,IAAWC,MAAD,IAAY;AACtDC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,MAAlC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCJ,KAAK,CAACK,QAAN,EAAxC;AACA,MAAIC,MAAM,GAAGL,IAAI,CAACC,MAAD,CAAjB;AACAK,EAAAA,UAAU,CAAC,MAAM;AACbJ,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GAFS,EAEP,IAFO,CAAV;AAGAD,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,KAAK,CAACK,QAAN,EAA1B;AACA,SAAOC,MAAP;AACH,CATD,C,CAWA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,MAAME,UAAU,GAAGnB,eAAe,CAACK,KAAD,CAAlC;AAEA,MAAMe,gBAAgB,GAClBC,MAAM,CAACC,oCAAP,IAA+CpB,OADnD;AAGA,MAAMqB,QAAQ,GAAGtB,eAAe,CAAC;AAC7BuB,EAAAA,KAAK,EAAEpB,YADsB;AAE7BqB,EAAAA,IAAI,EAAEnB,WAFuB;AAG/BC,EAAAA,YAH+B;AAIhCmB,EAAAA,IAAI,EAAEjB;AAJ0B,CAAD,CAAhC,C,CAQA;;AAEA,OAAO,MAAME,KAAK,GAAGR,WAAW,CAACoB,QAAD,EAAYH,gBAAgB,CAACD,UAAD,CAA5B,CAAzB","sourcesContent":["import { applyMiddleware, combineReducers, compose,createStore,} from 'redux';\nimport PostsReducer from './reducers/PostsReducer';\nimport thunk from 'redux-thunk';\nimport { AuthReducer } from './reducers/AuthReducer';\n//import rootReducers from './reducers/Index';\nimport todoReducers from './reducers/Reducers';\nimport { reducer as reduxFormReducer } from 'redux-form';\n\nconst loggerMiddleware = (store) => (next) => (action) => {\n    console.log('dispatching action', action);\n    console.log('before dispatching state', store.getState());\n    let result = next(action);\n    setTimeout(() => {\n        console.log('dispatch time out');\n    }, 3000);\n    console.log('next state', store.getState());\n    return result;\n};\n\n// const fetchDataMiddleware = (store) => (next) => (action) => {\n//     if (action.type === GET_POSTS) {\n//         //ajax call\n//     }\n\n//     return next(action);\n// };\n\nconst middleware = applyMiddleware(thunk);\n\nconst composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst reducers = combineReducers({\n    posts: PostsReducer,\n    auth: AuthReducer,\n\t\ttodoReducers,\n\tform: reduxFormReducer,\t\n\t\n});\n\n//const store = createStore(rootReducers);\n\nexport const store = createStore(reducers,  composeEnhancers(middleware));\n"]},"metadata":{},"sourceType":"module"}