{"ast":null,"code":"import swal from \"sweetalert\";\nimport { Redirect } from 'react-router-dom';\nimport { formatError, login, runLogoutTimer, saveTokenInLocalStorage, signUp } from '../../services/AuthService';\nexport const SIGNUP_CONFIRMED_ACTION = '[signup action] confirmed signup';\nexport const SIGNUP_FAILED_ACTION = '[signup action] failed signup';\nexport const LOGIN_CONFIRMED_ACTION = '[login action] confirmed login';\nexport const LOGIN_FAILED_ACTION = '[login action] failed login';\nexport const LOADING_TOGGLE_ACTION = '[Loading action] toggle loading';\nexport const LOGOUT_ACTION = '[Logout action] logout action';\nexport function logout(history) {\n  localStorage.removeItem('userDetails');\n  history.push('/login');\n  return {\n    type: LOGOUT_ACTION\n  };\n}\nexport function loginAction(email, password, history) {\n  return dispatch => {\n    login(email, password).then(response => {\n      saveTokenInLocalStorage(response.data);\n      runLogoutTimer(dispatch, response.data.expiresIn * 10000, history);\n      dispatch(loginConfirmedAction(response.data));\n      history.push('/');\n      window.location.reload();\n    }).catch(error => {\n      const errorMessage = formatError(error.response.data);\n      dispatch(loginFailedAction(errorMessage));\n    });\n  };\n}\nexport function loginFailedAction(data) {\n  return {\n    type: LOGIN_FAILED_ACTION,\n    payload: data\n  };\n}\nexport function loginConfirmedAction(data) {\n  return {\n    type: LOGIN_CONFIRMED_ACTION,\n    payload: data\n  };\n}\nexport function confirmedSignupAction(payload) {\n  return {\n    type: SIGNUP_CONFIRMED_ACTION,\n    payload\n  };\n}\nexport function signupFailedAction(message) {\n  return {\n    type: SIGNUP_FAILED_ACTION,\n    payload: message\n  };\n}\nexport function loadingToggleAction(status) {\n  return {\n    type: LOADING_TOGGLE_ACTION,\n    payload: status\n  };\n}","map":{"version":3,"sources":["C:/Users/XpS/Desktop/MERN-LOCATION-VOITURE/Front/src/store/actions/AuthActions.js"],"names":["swal","Redirect","formatError","login","runLogoutTimer","saveTokenInLocalStorage","signUp","SIGNUP_CONFIRMED_ACTION","SIGNUP_FAILED_ACTION","LOGIN_CONFIRMED_ACTION","LOGIN_FAILED_ACTION","LOADING_TOGGLE_ACTION","LOGOUT_ACTION","logout","history","localStorage","removeItem","push","type","loginAction","email","password","dispatch","then","response","data","expiresIn","loginConfirmedAction","window","location","reload","catch","error","errorMessage","loginFailedAction","payload","confirmedSignupAction","signupFailedAction","message","loadingToggleAction","status"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SACIC,WADJ,EAEIC,KAFJ,EAGIC,cAHJ,EAIIC,uBAJJ,EAKIC,MALJ,QAMO,4BANP;AASA,OAAO,MAAMC,uBAAuB,GAAG,kCAAhC;AACP,OAAO,MAAMC,oBAAoB,GAAG,+BAA7B;AACP,OAAO,MAAMC,sBAAsB,GAAG,gCAA/B;AACP,OAAO,MAAMC,mBAAmB,GAAG,6BAA5B;AACP,OAAO,MAAMC,qBAAqB,GAAG,iCAA9B;AACP,OAAO,MAAMC,aAAa,GAAG,+BAAtB;AAIP,OAAO,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AAC5BC,EAAAA,YAAY,CAACC,UAAb,CAAwB,aAAxB;AACAF,EAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACA,SAAO;AACHC,IAAAA,IAAI,EAAEN;AADH,GAAP;AAGH;AAED,OAAO,SAASO,WAAT,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsCP,OAAtC,EAA+C;AAClD,SAAQQ,QAAD,IAAc;AACjBnB,IAAAA,KAAK,CAACiB,KAAD,EAAQC,QAAR,CAAL,CACKE,IADL,CACWC,QAAD,IAAc;AAChBnB,MAAAA,uBAAuB,CAACmB,QAAQ,CAACC,IAAV,CAAvB;AACArB,MAAAA,cAAc,CACVkB,QADU,EAEVE,QAAQ,CAACC,IAAT,CAAcC,SAAd,GAA0B,KAFhB,EAGVZ,OAHU,CAAd;AAKDQ,MAAAA,QAAQ,CAACK,oBAAoB,CAACH,QAAQ,CAACC,IAAV,CAArB,CAAR;AACXX,MAAAA,OAAO,CAACG,IAAR,CAAa,GAAb;AACYW,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAEH,KAZL,EAaKC,KAbL,CAaYC,KAAD,IAAW;AACd,YAAMC,YAAY,GAAG/B,WAAW,CAAC8B,KAAK,CAACR,QAAN,CAAeC,IAAhB,CAAhC;AACAH,MAAAA,QAAQ,CAACY,iBAAiB,CAACD,YAAD,CAAlB,CAAR;AACH,KAhBL;AAiBH,GAlBD;AAmBH;AAED,OAAO,SAASC,iBAAT,CAA2BT,IAA3B,EAAiC;AACpC,SAAO;AACHP,IAAAA,IAAI,EAAER,mBADH;AAEHyB,IAAAA,OAAO,EAAEV;AAFN,GAAP;AAIH;AAED,OAAO,SAASE,oBAAT,CAA8BF,IAA9B,EAAoC;AACvC,SAAO;AACHP,IAAAA,IAAI,EAAET,sBADH;AAEH0B,IAAAA,OAAO,EAAEV;AAFN,GAAP;AAIH;AAED,OAAO,SAASW,qBAAT,CAA+BD,OAA/B,EAAwC;AAC3C,SAAO;AACHjB,IAAAA,IAAI,EAAEX,uBADH;AAEH4B,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,SAASE,kBAAT,CAA4BC,OAA5B,EAAqC;AACxC,SAAO;AACHpB,IAAAA,IAAI,EAAEV,oBADH;AAEH2B,IAAAA,OAAO,EAAEG;AAFN,GAAP;AAIH;AAED,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;AACxC,SAAO;AACHtB,IAAAA,IAAI,EAAEP,qBADH;AAEHwB,IAAAA,OAAO,EAAEK;AAFN,GAAP;AAIH","sourcesContent":["import swal from \"sweetalert\";\nimport { Redirect } from 'react-router-dom';\nimport {\n    formatError,\n    login,\n    runLogoutTimer,\n    saveTokenInLocalStorage,\n    signUp,\n} from '../../services/AuthService';\n\n\nexport const SIGNUP_CONFIRMED_ACTION = '[signup action] confirmed signup';\nexport const SIGNUP_FAILED_ACTION = '[signup action] failed signup';\nexport const LOGIN_CONFIRMED_ACTION = '[login action] confirmed login';\nexport const LOGIN_FAILED_ACTION = '[login action] failed login';\nexport const LOADING_TOGGLE_ACTION = '[Loading action] toggle loading';\nexport const LOGOUT_ACTION = '[Logout action] logout action';\n\n\n\nexport function logout(history) {\n    localStorage.removeItem('userDetails');\n    history.push('/login');\n    return {\n        type: LOGOUT_ACTION,\n    };\n}\n\nexport function loginAction(email, password, history) {\n    return (dispatch) => {\n        login(email, password)\n            .then((response) => {\n                saveTokenInLocalStorage(response.data);\n                runLogoutTimer(\n                    dispatch,\n                    response.data.expiresIn * 10000,\n                    history,\n                );\n               dispatch(loginConfirmedAction(response.data));\n\t\t\t\thistory.push('/');\n                window.location.reload();\n\t\t\t\t\n            })\n            .catch((error) => {\n                const errorMessage = formatError(error.response.data);\n                dispatch(loginFailedAction(errorMessage));\n            });\n    };\n}\n\nexport function loginFailedAction(data) {\n    return {\n        type: LOGIN_FAILED_ACTION,\n        payload: data,\n    };\n}\n\nexport function loginConfirmedAction(data) {\n    return {\n        type: LOGIN_CONFIRMED_ACTION,\n        payload: data,\n    };\n}\n\nexport function confirmedSignupAction(payload) {\n    return {\n        type: SIGNUP_CONFIRMED_ACTION,\n        payload,\n    };\n}\n\nexport function signupFailedAction(message) {\n    return {\n        type: SIGNUP_FAILED_ACTION,\n        payload: message,\n    };\n}\n\nexport function loadingToggleAction(status) {\n    return {\n        type: LOADING_TOGGLE_ACTION,\n        payload: status,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}