{"ast":null,"code":"import axios from \"axios\";\nimport swal from \"sweetalert\";\nimport { loginConfirmedAction, logout } from \"../store/actions/AuthActions\";\nexport function signUp(email, password) {\n  //axios call\n  const postData = {\n    email,\n    password,\n    returnSecureToken: true\n  };\n  return axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAXfPJMW8pOLxdmHnPXvWCrD_aBA6BuZD8`, postData);\n}\nexport function login(email, password) {\n  const postData = {\n    email,\n    password,\n    returnSecureToken: true\n  };\n  return axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAXfPJMW8pOLxdmHnPXvWCrD_aBA6BuZD8`, postData);\n}\nexport function formatError(errorResponse) {\n  switch (errorResponse.error.message) {\n    case \"EMAIL_EXISTS\":\n      // return 'Email already exists';\n      swal(\"Oops\", \"Email already exists\", \"error\");\n      break;\n\n    case \"EMAIL_NOT_FOUND\":\n      //return 'Email not found';\n      swal(\"Oops\", \"Email not found\", \"error\", {\n        button: \"Try Again!\"\n      });\n      break;\n    // swal('Oops',  \"There is no user record corresponding to this identifier. The user may have been deleted.\");\n\n    case \"INVALID_PASSWORD\":\n      //return 'Invalid Password';\n      swal(\"Oops\", \"Invalid Password\", \"error\", {\n        button: \"Try Again!\"\n      });\n      break;\n\n    case \"USER_DISABLED\":\n      return \"User Disabled\";\n\n    default:\n      return \"\";\n  }\n}\nexport function saveTokenInLocalStorage(tokenDetails) {\n  tokenDetails.expireDate = new Date(new Date().getTime() + tokenDetails.expiresIn * 1000);\n  localStorage.setItem(\"userDetails\", JSON.stringify(tokenDetails));\n}\nexport function runLogoutTimer(dispatch, timer, history) {\n  setTimeout(() => {\n    dispatch(logout(history));\n  }, timer);\n}\nexport function checkAutoLogin(dispatch, history) {\n  const tokenDetailsString = localStorage.getItem(\"userDetails\");\n  let tokenDetails = \"\";\n\n  if (!tokenDetailsString) {\n    dispatch(logout(history));\n    return;\n  }\n\n  tokenDetails = JSON.parse(tokenDetailsString);\n  let expireDate = new Date(tokenDetails.expireDate);\n  let todaysDate = new Date();\n\n  if (todaysDate > expireDate) {\n    dispatch(logout(history));\n    return;\n  }\n\n  dispatch(loginConfirmedAction(tokenDetails));\n  const timer = expireDate.getTime() - todaysDate.getTime();\n  runLogoutTimer(dispatch, timer, history);\n}","map":{"version":3,"sources":["C:/Users/XpS/Desktop/MERN-LOCATION-VOITURE - Copy/Front/src/services/AuthService.js"],"names":["axios","swal","loginConfirmedAction","logout","signUp","email","password","postData","returnSecureToken","post","login","formatError","errorResponse","error","message","button","saveTokenInLocalStorage","tokenDetails","expireDate","Date","getTime","expiresIn","localStorage","setItem","JSON","stringify","runLogoutTimer","dispatch","timer","history","setTimeout","checkAutoLogin","tokenDetailsString","getItem","parse","todaysDate"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport swal from \"sweetalert\";\nimport { loginConfirmedAction, logout } from \"../store/actions/AuthActions\";\n\nexport function signUp(email, password) {\n  //axios call\n\n  const postData = {\n    email,\n    password,\n    returnSecureToken: true,\n  };\n\n  return axios.post(\n    `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAXfPJMW8pOLxdmHnPXvWCrD_aBA6BuZD8`,\n    postData\n  );\n}\n\nexport function login(email, password) {\n  const postData = {\n    email,\n    password,\n    returnSecureToken: true,\n  };\n\n  return axios.post(\n    `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAXfPJMW8pOLxdmHnPXvWCrD_aBA6BuZD8`,\n    postData\n  );\n}\n\nexport function formatError(errorResponse) {\n  switch (errorResponse.error.message) {\n    case \"EMAIL_EXISTS\":\n      // return 'Email already exists';\n      swal(\"Oops\", \"Email already exists\", \"error\");\n      break;\n    case \"EMAIL_NOT_FOUND\":\n      //return 'Email not found';\n      swal(\"Oops\", \"Email not found\", \"error\", { button: \"Try Again!\" });\n      break;\n    // swal('Oops',  \"There is no user record corresponding to this identifier. The user may have been deleted.\");\n    case \"INVALID_PASSWORD\":\n      //return 'Invalid Password';\n      swal(\"Oops\", \"Invalid Password\", \"error\", { button: \"Try Again!\" });\n      break;\n    case \"USER_DISABLED\":\n      return \"User Disabled\";\n\n    default:\n      return \"\";\n  }\n}\n\nexport function saveTokenInLocalStorage(tokenDetails) {\n  tokenDetails.expireDate = new Date(\n    new Date().getTime() + tokenDetails.expiresIn * 1000\n  );\n  localStorage.setItem(\"userDetails\", JSON.stringify(tokenDetails));\n}\n\nexport function runLogoutTimer(dispatch, timer, history) {\n  setTimeout(() => {\n    dispatch(logout(history));\n  }, timer);\n}\n\nexport function checkAutoLogin(dispatch, history) {\n  const tokenDetailsString = localStorage.getItem(\"userDetails\");\n  let tokenDetails = \"\";\n  if (!tokenDetailsString) {\n    dispatch(logout(history));\n    return;\n  }\n\n  tokenDetails = JSON.parse(tokenDetailsString);\n  let expireDate = new Date(tokenDetails.expireDate);\n  let todaysDate = new Date();\n\n  if (todaysDate > expireDate) {\n    dispatch(logout(history));\n    return;\n  }\n  dispatch(loginConfirmedAction(tokenDetails));\n\n  const timer = expireDate.getTime() - todaysDate.getTime();\n  runLogoutTimer(dispatch, timer, history);\n}\n"]},"metadata":{},"sourceType":"module"}